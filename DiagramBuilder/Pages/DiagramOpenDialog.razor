@using Syncfusion.Blazor.Popups

@namespace DiagramBuilder

<SfDialog ID="openTemplateDialog" Width="695px" IsModal="true" ShowCloseIcon="true" AllowDragging="true" @bind-Visible="@IsOpenDialogVisible">
    <DialogTemplates>
        <Header>
            Create New Diagram
        </Header>
        <Content>
            <div id="diagramTemplateDiv1">
                <div class="row">
                    <div class="col-xs-3 temp-left-pane">
                        @{
                            string ClassName = "row db-diagram-template-parent-text";
                            if (this.Value == "Flow Diagram")
                                ClassName = "row db-diagram-template-parent-text flowdiagram-template active";
                            else
                                ClassName = "row db-diagram-template-parent-text flowdiagram-template";
                            <div class=@ClassName @onclick="@ShowFlowChartTemplates">
                                <span>Flow Chart</span>
                            </div>
                        }
                    </div>
                    <div class="col-xs-9 diagramTemplates temp-right-pane" style="padding-left:0px;padding-right:0px">
                        <div class="class db-parent-diagram-template">
                            <div id="" class="db-diagram-template-div" style="">
                                @{
                                    if (this.Value == "Flow Diagram")
                                    {
                                        <div class="db-diagram-template-image-div" id="flowchart_child0" @onclick="@BlankFlowDiagram">
                                            <div class="db-diagram-template-svg-blank-image" style="background-image: url(&quot;./assets/dbstyle/common_images/blank_diagram.svg&quot;);" alt="blank_diagram">
                                            </div>
                                        </div>
                                    }
                                }
                                <div class="db-diagram-template-text">
                                    <span id="diagramTemplateText">Blank Diagram</span>
                                </div>
                            </div>
                            <div id="" class="db-diagram-template-div" style="">
                                @{
                                    if (this.Value == "Flow Diagram")
                                    {
                                        <div class="db-diagram-template-image-div" id="flowchart_child1" @onclick="@CreditProcessDiagram">
                                            <div class="db-diagram-template-svg-image" style="background-image: url(&quot;./assets/dbstyle/flowchart_Images/Credit_Card_Processing.svg&quot;);" alt="Credit_Card_Processing">
                                            </div>
                                        </div>
                                        <div class="db-diagram-template-text">
                                            <span id="diagramTemplateText">Credit Card Processing</span>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Content>
    </DialogTemplates>
</SfDialog>

@code {

    internal DiagramMain Parent;

    [Inject]
    protected IJSRuntime jsRuntime { get; set; }

    public bool IsOpenDialogVisible { get; set; } = true;
    string Value;

    protected override void OnInitialized()
    {
        this.Value = "Flow Diagram";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            this.IsOpenDialogVisible = true;
            StateHasChanged();

        }
    }

    public void StateChanged()
    {
        this.StateChanged();
    }

    public void ShowFlowChartTemplates()
    {
        this.Value = "Flow Diagram";
        StateHasChanged();
    }
    public void ShowMindMapTemplates()
    {
        this.Value = "Mind Map";
        StateHasChanged();
    }
    public void ShowOrgChartTemplates()
    {
        this.Value = "Org Chart";
        StateHasChanged();
    }

    public void BlankFlowDiagram()
    {
        IsOpenDialogVisible = false;
        StateHasChanged();
    }

    public async Task BlankMindMapDiagram()
    {
        LoadTemplate(@"./wwwroot/assets/dbstyle/mindmap_images/BlankDiagram.json");
        CurrentDiagramVisibility("mindmap-diagram");
        await Task.Delay(2500);
    }

    public void BlankOrgChartDiagram()
    {
        this.Value = "Org Chart";
        StateHasChanged();
    }

    public async Task CreditProcessDiagram()
    {
        await Parent.DiagramContent.CreditProcessDiagram();
        IsOpenDialogVisible = false;
    }

    public async Task BusinessPlanningDiagram()
    {
        LoadTemplate(@"./wwwroot/assets/dbstyle/mindmap_images/BusinessPlanning.json");
        CurrentDiagramVisibility("mindmap-diagram");
        await Task.Delay(2500);
    }

    public void OrgRenderingStyle1Diagram()
    {
        LoadTemplate(@"./wwwroot/assets/dbstyle/orgchart_images/OrgTemplateStyle1.json");
    }

    public void BankTellerFlowDiagram()
    {
        LoadTemplate(@"./wwwroot/assets/dbstyle/flowchart_Images/BankingTellerProcess.json");
        jsRuntime.InvokeAsync<string>("diagramNameChange", "Banking Teller Process Flow", true);
    }

    public async Task TQMDiagram()
    {
        LoadTemplate(@"./wwwroot/assets/dbstyle/mindmap_images/TQM.json");
        CurrentDiagramVisibility("mindmap-diagram");
        await Task.Delay(2500);
    }

    public void OrgRenderingStyle2Diagram()
    {
        LoadTemplate(@"./wwwroot/assets/dbstyle/orgchart_images/OrgTemplateStyle2.json");
    }

    public void DeveloperWorkFlowDiagram()
    {
        LoadTemplate(@"./wwwroot/assets/dbstyle/flowchart_Images/Developer_Workflow.json");
        jsRuntime.InvokeAsync<string>("diagramNameChange", "Agile's Developer Workflow", true);
    }

    public async Task SoftwareLifeCycleDiagram()
    {
        LoadTemplate(@"./wwwroot/assets/dbstyle/mindmap_images/SoftwareDevelopmentLifeCycle.json");
        CurrentDiagramVisibility("mindmap-diagram");
        await Task.Delay(2500);
    }

    public void OrgRenderingStyle3Diagram()
    {
        LoadTemplate(@"./wwwroot/assets/dbstyle/orgchart_images/OrgTemplateStyle3.json");
    }

    public void LoadTemplate(string fileLocation)
    {
        string json = System.IO.File.ReadAllText(fileLocation);
        json = json.Replace(System.Environment.NewLine, string.Empty);
        this.Parent.DiagramContent.LoadNewDiagram(json.ToString());
        IsOpenDialogVisible = false;
        StateHasChanged();
    }

    public void CurrentDiagramVisibility(string DiagramName)
    {
        Parent.PropertyPanelClassName += " " + DiagramName;
        Parent.DiagramBuilderClassName += " hide-palette custom-diagram";
        Parent.DiagramContent.DiagramContainerClassName += " " + DiagramName;
    }
}
