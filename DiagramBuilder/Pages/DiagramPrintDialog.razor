
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons

@inject IJSRuntime jsRuntime
@namespace DiagramBuilder

<SfDialog @ref="@PrintDialog" @bind-Visible="@PrintDialogVisible" IsModal="true" Width="335px" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>Print Diagram</Header>
        <Content>
            <div id="printDialogContent">
                <div class="row">
                    <div class="row">Region</div> <div class="row db-dialog-child-prop-row">
                        <SfDropDownList ID="printRegionDropdown" TValue="Regions" TItem="string" Placeholder="Content" @bind-Value="@CurrentRegionValue" DataSource="@RegionValues">
                        </SfDropDownList>
                    </div>
                </div><div class="row db-dialog-prop-row">
                    <div class="row">Print Settings</div>
                    <div class="row db-dialog-child-prop-row">
                        <SfDropDownList ID="printPaperSizeDropdown" TValue="string" TItem = "DiagramPropertyContainer.PaperListFields" @bind-Value="@PaperSz" DataSource="@PaperList">
                            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" TItem="DiagramPropertyContainer.PaperListFields" ValueChange="@PaperChanged"></DropDownListEvents>
                        </SfDropDownList>
                    </div>
                </div>
                <div id="printCustomSize" class="row db-dialog-prop-row" style="display:none; height: 28px;">
                    <div class="col-xs-6 db-col-left">
                        <div class="db-text-container">
                            <div class="db-text"><span>W</span></div><div class="db-text-input">
                                <SfNumericTextBox ID="printPageWidth" TValue="int" Min="100" Step="1" Format="int">
                                </SfNumericTextBox>
                            </div>
                        </div>
                    </div> <div class="col-xs-6 db-col-right">
                        <div class="db-text-container">
                            <div class="db-text"><span>H</span></div>
                            <div class="db-text-input">
                                <SfNumericTextBox ID="printPageHeight" TValue="int" Min="100" Step="1" Format="int">
                                </SfNumericTextBox>
                            </div>
                        </div>
                    </div>
                </div><div id="printOrientation" class="row db-dialog-prop-row" style="height: 28px; padding: 5px 0px;">
                    <div class="col-xs-3 db-prop-col-style" style="margin-right: 8px;">
                        <SfRadioButton TChecked="string" Label="Potrait" Name="printSettings" Value="portrait" Checked="@orientationCheckedValue" ValueChange="@OrientationChanged">
                           
                        </SfRadioButton>
                    </div>
                    <div class="col-xs-3 db-prop-col-style">
                        <SfRadioButton TChecked="string" Label="Landscape" Name="printSettings" Value="landscape" Checked="@orientationCheckedValue" ValueChange="@OrientationChanged">
                        </SfRadioButton>
                    </div>
                </div>
                <div class="row db-dialog-prop-row" style="margin-top: 16px">
                    <SfCheckBox ID="printMultiplePage" TChecked="bool" Label="Scale to fit entire page to single page" Checked="@IsMultiplePage" ValueChange="@MultiplePage">
                    </SfCheckBox>
                </div>
            </div>
        </Content>
    </DialogTemplates>
    <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    <DialogButtons>
        <DialogButton OnClick="@PrintDialogHandler" Content="Print" CssClass="e-flat e-db-primary" IsPrimary="true">
        </DialogButton>
        <DialogButton OnClick="@PrintDialogCloseHandler" Content="Cancel" CssClass="e-flat">
        </DialogButton>
    </DialogButtons>
</SfDialog>
@code {
    internal DiagramMenuBar Parent;
    public string DiagramfileName = "Diagram1";
    public SfDialog PrintDialog;
    public bool PrintDialogVisible = false;
    public string PaperSz = "Letter";
    bool IsPortrait = true;
    bool IsLandscape = false;
    bool IsMultiplePage = false;
    double PageHeight = 816;
    double PageWidth = 1056;
    string orientationCheckedValue = "portrait";

    private void PaperChanged(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DiagramPropertyContainer.PaperListFields> args)
    {
        DiagramPropertyContainer.PaperSize Size= Parent.Parent.DiagramPropertyPanel.GetPaperSize(args.Value);
        PageHeight = Size.PageHeight;
        PageWidth = Size.PageWidth;
    }
    private void MultiplePage(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        IsMultiplePage = args.Checked;
    }

    private async Task PrintDialogHandler()
    {
        double pageWidth = PageWidth;
        double pageHeight = PageHeight;
        if (IsPortrait)
        {
            if (pageWidth > pageHeight)
            {
                var temp = pageWidth;
                pageWidth = pageHeight;
                pageHeight = temp;
            }
        }
        if (IsLandscape)
        {
            if (pageHeight > pageWidth)
            {
                var temp1 = pageHeight;
                pageHeight = pageWidth;
                pageWidth = temp1;
            }
        }

        DiagramPrintSettings options = new DiagramPrintSettings()
        {
            FitToPage = !IsMultiplePage,
            Orientation = IsPortrait ? Syncfusion.Blazor.Diagram.PageOrientation.Portrait : Syncfusion.Blazor.Diagram.PageOrientation.Landscape,
            PageHeight = pageHeight,
            PageWidth = pageWidth,
            Margin = new DiagramThickness() { Bottom = 0, Left = 0, Right = 0, Top = 0 },
            Region = (DiagramPrintExportRegion)Enum.Parse(typeof(DiagramPrintExportRegion), CurrentRegionValue.ToString(), true),
        };

        await Parent.PrintDiagram(options);
        await PrintDialog.Hide();
    }
    private async Task PrintDialogCloseHandler()
    {
        await PrintDialog.Hide();
    }

    private void OrientationChanged(ChangeArgs<string> args)
    {
        if (args.Value.ToString() == "portrait")
        {
            IsPortrait = true;
            IsLandscape = false;
            orientationCheckedValue = "portrait";
        }
        else if (args.Value.ToString() == "landscape")
        { 
            IsLandscape = true;
            IsPortrait = false;
            orientationCheckedValue = "landscape";
        }
    }

    public List<DiagramPropertyContainer.PaperListFields> PaperList = new List<DiagramPropertyContainer.PaperListFields>() {
        new DiagramPropertyContainer.PaperListFields{ Text= "Letter (8.5 in x 11 in)", Value= "Letter" },
        new DiagramPropertyContainer.PaperListFields{ Text= "Legal (8.5 in x 14 in)", Value= "Legal" },
        new DiagramPropertyContainer.PaperListFields{ Text= "Tabloid (279 mm x 432 mm)", Value= "Tabloid" },
        new DiagramPropertyContainer.PaperListFields{ Text= "A3 (297 mm x 420 mm)", Value= "A3" },
        new DiagramPropertyContainer.PaperListFields{ Text= "A4 (210 mm x 297 mm)", Value= "A4" },
        new DiagramPropertyContainer.PaperListFields{ Text= "A5 (148 mm x 210 mm)", Value= "A5" },
        new DiagramPropertyContainer.PaperListFields{ Text= "A6 (105 mm x 148 mm)", Value= "A6" },
        new DiagramPropertyContainer.PaperListFields{ Text= "Custom", Value= "Custom" },
    };
    public string[] RegionValues = Enum.GetNames(typeof(Regions));
    public Regions CurrentRegionValue { get; set; } = Regions.PageSettings;

    public enum Regions
    {
        PageSettings,
        Content,
    }
}
